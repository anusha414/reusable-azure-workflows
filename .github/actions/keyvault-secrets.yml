name: 'keyvault secrets'
description: 'create or update keyvault secrets'
inputs:
  secret_name:
    description: 'specify the name for the secret'
    required: false
    type: string
  keyvault_name:
    description: 'specify the name of the keyvault'
    required: false
    type: string
  secret_value:
    description: 'fetch the secret value'
    required: false
    type: string
  disable_specific_version:
    description: 'disable the specified version of the secret'
    required: false
    type: boolean
    default: false
  disable_previous_versions:
    description: 'disable the previous versions of the secret'
    required: false
    type: boolean
    default: false
  version_id:
    description: 'specify the version id to disable'
    required: false
    type: string
  disable_version_only:
    description: 'disable the specified version of the secret'
    required: false
    type: boolean
    default: false
runs:
 using: 'composite'
 steps:
   - name: Create or update Azure keyvault secrets
     uses: azure/cli@v2
     with:
        azcliversion: latest
        inlineScript: |
            input_secret_name="${{ inputs.secret_name }}"
            secret_name=$(az keyvault secret list --vault-name ${{ inputs.keyvault_name }} --query "[?name=='$input_secret_name'].name" -o tsv)
            if [ -z "$secret_name" ]; then
              echo "Secret ${{ inputs.secret_name }} does not exist. Creating it..."
              az keyvault secret set --vault-name ${{ inputs.keyvault_name }} --name ${{ inputs.secret_name }} --value ${{ inputs.secret_value }}
            else
              if [ "${{ inputs.disable_version_only }}" == "true" ]; then
                echo "only disable the existing version"
                az keyvault secret set-attributes --vault-name ${{ inputs.keyvault_name }} --name ${{ inputs.secret_name }} --version ${{ inputs.version_id }} --enabled false
              else
                echo "Secret ${{ inputs.secret_name }} exists."
                existing_secret_value=$(az keyvault secret show --vault-name ${{ inputs.keyvault_name }} --name ${{ inputs.secret_name }} --query "value" -o tsv)
                if [ "$existing_secret_value" != "${{ inputs.secret_value }}" ]; then
                  echo "Secret ${{ inputs.secret_name }} exists but values do not match. Updating it..."
                  new_version=$(az keyvault secret set --vault-name ${{ inputs.keyvault_name }} --name ${{ inputs.secret_name }} --value ${{ inputs.secret_value }} --query "id" -o tsv)
                  echo "New version of secret created: $new_version"
                  new_version_id="${new_version##*/}"

                  if [ "${{ inputs.disable_previous_versions }}" == "true" ]; then
                    old_versions=$(az keyvault secret list-versions --vault-name ${{ inputs.keyvault_name }} --name ${{ inputs.secret_name }} --query "[?id!='${new_version}'].id" -o tsv) 
                    echo "$old_versions"
                    for version in $old_versions; do
                      versions_id="${version##*/}"
                      echo "Disabling old version: $version"
                      az keyvault secret set-attributes --vault-name ${{ inputs.keyvault_name }} --name ${{ inputs.secret_name }} --version $versions_id --enabled false
                    done
                  elif [ "${{ inputs.disable_specific_version }}" == "true" ]; then
                    az keyvault secret set-attributes --vault-name ${{ inputs.keyvault_name }} --name ${{ inputs.secret_name }} --version ${{ inputs.version_id }} --enabled false
                  else
                    echo "secret has been set without disabling versions"
                  fi           
                else
                  echo "Secret ${{ inputs.secret_name }} is up to date. No update needed."
                fi
              fi
            fi
